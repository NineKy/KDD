plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    //swagger
    id 'org.hidetake.swagger.generator' version '2.19.2'

    //jacoco
    id 'jacoco'
}

group = 'me.kdshim'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'



repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation ('org.springframework.boot:spring-boot-starter-web'){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    //view
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //obj Mapping
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:11.0.2'

    //actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //Swagger
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.34'  // or Swagger Codegen V3
    swaggerUI 'org.webjars:swagger-ui:3.52.5'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.0'
    implementation 'io.swagger:swagger-annotations:1.6.6'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'mysql:mysql-connector-java'

    //h2
    runtimeOnly 'com.h2database:h2'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //AssertJ -> Pretty TestCode
    //https://assertj.github.io/doc/#common-types
    testImplementation "org.assertj:assertj-core:3.20.2"

    //testContainers
    testImplementation 'org.testcontainers:testcontainers:1.16.2'
    testImplementation "org.testcontainers:mysql:1.17.2"

    //kotlin test
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.3.0'
    testImplementation('io.kotest:kotest-assertions-core:5.5.4')
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")


}

//SwaggerSource Setting
swaggerSources {
    KDD_J {
        inputFile = file("$rootDir/spec/kdd.yaml")
        code {
            language = 'spring'
            configFile = file("$rootDir/spec/KDD-spec.json")
            wipeOutputDir = false
            outputDir = file("$rootDir")
            components = ['models', 'apis', 'apiTests']
        }
    }
}

//Jacoco Setting
jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled false
        xml.enabled false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
            }
        }
    }
}

//define fullTest Task
task fullTest(type: Test){
    finalizedBy "test"
}

sourceSets{
    fullTest{
        java{
            srcDir file("src/test/java/")
        }
        resources{
            srcDir file("src/test/resources")
        }
    }
    test{
        java{
            srcDir file("src/test/java/")
        }
    }
    integrationTest {
        java.srcDir "src/integrationTest/kotlin"
        resources.srcDir "src/integrationTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

test{
    useJUnitPlatform()
}


//grouping
def groupName = "0.myaction"
bootRun.group = groupName
generateSwaggerCode.group = groupName
build.group = groupName
clean.group = groupName
fullTest.group = groupName
integrationTest.group = groupName
