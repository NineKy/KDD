openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'KDD Project'
  description: 'This project is created by kd 
  In this project, there are some techs with I learned'
servers:
  - url: http://localhost:8080
tags:
  - name: "독서"
    description: "독서 기록"
  - name: "링크"
    description: "링크 기록"
  - name: "회원관리"
    description: "회원 관리"
  - name: "TODO"
    description: "해야할 일 관리"
  - name: "Github"
    description: "Github OpenAPI Data"
  - name: "Util"
    description: "Utility API"

paths:
  /utils/jsonify:
    post:
      tags:
        - "Util"
      summary: "Lombok @toString to json format"
      description: "Lombok @toString to json format"
      operationId: toStringToJSON
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: string
                description: 파싱한 json
                example: "{key: value}"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
  /utils/acb/transaction:
    post:
      tags:
        - "Util"
      summary: "가계부로 transaction 등록 - for test"
      description: "가계부로 transaction 등록 - for test"
      operationId: postTransaction
#      requestBody:
#        description: "post transaction request body"
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/PostTranRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTransResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /todo:
    post:
      tags:
        - "TODO"
      summary: my TODO 등록
      description: my TODO 등록
      operationId: postTODO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postTODODto'
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTODODto'
        400:
          description: 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /todo/all:
    get:
      tags:
        - "TODO"
      summary: 모든 TODO 조회
      description: 모든 TODO 조회
      operationId: getAllTodo
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTodoDtoList'
        400:
          description: 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'


  /todo/undone:
    get:
      tags:
        - "TODO"
      summary: Get UNDONE TODO
      description: 상태가 UNDONE인 TODO를 모두 가져온다
      operationId: getUndoneTodo
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTodoDtoList'


  /link/{url}:
    get:
      tags:
        - "링크"
      summary: URL으로 link 조회
      description: URL으로 저장한 link를 조회
      operationId: findSingleLink
      parameters:
        - name: url
          in: path
          description: 저장해둔 링크를 URL으로 조회
          required: true
          schema:
            type: string
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLinkDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'


  /link/find/{keyword}:
    get:
      tags:
        - "링크"
      summary: 입력받은 URL을 가진 링크 조회
      description: 입력값을 LIKE 키워드를 사용해 조회
      operationId: findLinksLikeUrl
      parameters:
        - name: keyword
          in: path
          description: 링크에 있는 단어를 기준으로 검색
          required: true
          schema:
            type: string
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getLinkDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /link:
    post:
      tags:
        - "링크"
      summary: 단일 링크 저장
      description: 단일 링크 저장
      operationId: saveSingleLink
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PostLinkDto'
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLinkDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /links:
    get:
      tags:
        - "링크"
      summary: 저장된 모든 링크 가져오기
      description: 모든 링크 리스트로 가져오기
      operationId: getAllLinks
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getLinkDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

    post:
      tags:
        - "링크"
      summary: 리스트로 링크 저장
      description: 리스트로 링크 저장
      operationId: saveLinkList
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PostLinkDto'
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getLinkDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

    delete:
      tags:
        - "링크"
      summary: 저장된 모든 링크 삭제
      description: 모든 링크들 삭제
      operationId: deleteAllLinks
      responses:
        200:
          description: SUCCESS
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /member:
    post:
      tags:
        - "회원"
      summary: 회원 등록
      description: 회원 등록
      operationId: postMember
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PostMemberDto'
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMemberDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /github/kyu9/library/commits:
    get:
      tags:
        - "Github"
      summary: kyu9's 도서관 커밋 조회
      description: kyu9's 도서관 커밋 조회
      operationId: getKyuLibraryCommits
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSimpleCommitsDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /github/kyu9/library/info:
    get:
      tags:
        - "Github"
      summary: kyu9's 도서관 Repo 정보 조회
      description: kyu9's 도서관 Repo 정보 조회
      operationId: getKyuLibraryRepoInfo
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSimpleRepoInfoDto'
        400:
          description: FAIL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'


components:
  schemas:
    getTODODto:
      type: object
      properties:
        id:
          type: integer
          description: TODO ID
          example: 1
        todo:
          type: string
          description: TODO 내용
          example: DO SOMETHING!
        status:
          type: string
          enum:
            - DONE
            - UNDONE
            - DOING
          description: TODO 상태 [DONE, UNDONE, DOING]
          example: TODO
        endDate:
          type: string
          description: TODO 끝낸 시간(YYYYMMDD)
          example: 20220721
        created:
          type: string
          description: TODO 생성날짜
          example: 20220721200908
        updated:
          type: string
          description: TODO 변경날짜
          example: 20220721200908

    getTodoDtoList:
      type: object
      description: todo 리스트 조회
      properties:
        dtoList:
          type: array
          items:
            $ref: '#/components/schemas/getTODODto'

    postTODODto:
      type: object
      properties:
        todo:
          type: string
          description: TODO 내용
          example: DO SOMETHING!
        endDate:
          type: string
          description: TODO's endDate(yyyymmddHH24MISS)
          example: 2022072100908

    getLinkDto:
      type: object
      properties:
        url:
          type: string
          description: 링크(raw url)
          example:
            https://jypthemiracle.medium.com/java-stream-api는-왜-for-loop보다-느릴까-50dec4b9974b
        name:
          type: string
          description: 해당 url 이름
          example: Java Stream API는 왜 for-loop보다 느릴까?
        memo:
          type: string
          description: 해당 url 설명
          example: 실제 예시를 통한 비교 해둔 글
        category:
          type: string
          enum:
            - JAVA
            - SPRING
            - FOOD
            - WORK
            - KOTLIN
          description: 글의 타입[JAVA, SPRING, FOOD, WORK, KOTLIN]
          example: JAVA
        created:
          type: string
          format: date-time
          description: 엔티티 생성시간
        update:
          type: string
          format: date-time
          description: 엔티티 수정시간

    PostLinkDto:
      type: object
      properties:
        name:
          type: string
          description: 해당 url 이름
          example: Java Stream API는 왜 for-loop보다 느릴까?
        url:
          type: string
          description: 링크(raw url)
          example: https://jypthemiracle.medium.com/java-stream-api는-왜-for-loop보다-느릴까-50dec4b9974b
        memo:
          type: string
          description: 해당 url 설명
          example: 실제 예시를 통한 비교 해둔 글
        category:
          type: string
          enum:
            - JAVA
            - SPRING
            - FOOD
            - WORK
            - KOTLIN
          description: 글의 타입[JAVA, SPRING, FOOD, WORK, KOTLIN]
          example: JAVA

    PostMemberDto:
      type: object
      properties:
        loginId:
          type: string
          description: 로그인시 받는 아이디
          example: playggg
        password:
          type: string
          description: 로그인시 저장되는 아이디
          example: rbeh!234
        role:
          type: string
          enum:
            - ADMIN
            - USER
          description: 사용자의 타입
          example: USER
        name:
          type: string
          description: 이름
          example: kdshim
        birthDateYYYYMMDD:
          type: string
          description: 생년월일
          example: 19970329
        married:
          type: boolean
          description: 결혼 여부
          example: false
        email:
          type: string
          description: 이메일
          example: kyudo97@naver.com
        oldAddr:
          type: string
          description: 지번주소
          example: 경기도 고양시 일산서구 주엽동 84
        addr:
          type: string
          description: 도로명주소
          example: 경기도 고양시 일산서구 강선로 30
        addrDetail:
          type: string
          description: 상세주소
          example: 1504동 1501호
        zipCode:
          type: string
          description: 우편번호
          example: 10365

    GetMemberDto:
      type: object
      properties:
        loginId:
          type: string
          description: 로그인시 받는 아이디
          example: playggg
        password:
          type: string
          description: 로그인시 저장되는 아이디
          example: rbeh!234
        role:
          type: string
          enum:
            - ADMIN
            - USER
          description: 사용자의 타입
          example: USER
        name:
          type: string
          description: 이름
          example: kdshim
        birthDateYYYYMMDD:
          type: string
          description: 생년월일
          example: 19970329
        married:
          type: boolean
          description: 결혼 여부
          example: false
        email:
          type: string
          description: 이메일
          example: kyudo97@naver.com
        oldAddr:
          type: string
          description: 지번주소
          example: 경기도 고양시 일산서구 주엽동 84
        addr:
          type: string
          description: 도로명주소
          example: 경기도 고양시 일산서구 강선로 30
        addrDetail:
          type: string
          description: 상세주소
          example: 1504동 1501호
        zipCode:
          type: string
          description: 우편번호
          example: 10365
        created:
          type: string
          format: date-time
          description: 엔티티 생성시간
        update:
          type: string
          format: date-time
          description: 엔티티 수정시간

    GetSimpleCommitsDto:
      type: object
      description: 간단한 커밋 조회
      properties:
        commitList:
          type: array
          items:
            $ref: '#/components/schemas/GetSimpleCommitDto'

    GetSimpleCommitDto:
      type: object
      properties:
        author:
          type: string
          description: 커밋한 닉네임
          example: kyu9
        commitMsg:
          type: string
          description: 커밋 메세지 내용
          example: 아무튼 커밋 메세지입니다
        commitYYYYMMDD:
          type: string
          description: 해당 커밋 YYYY-MM-DD
          example: 2022-11-19

    GetSimpleRepoInfoDto:
      type: object
      properties:
        repoName:
          type: string
          description: 해당 레포 이름
          example: My-Library
        repoFullName:
          type: string
          description: 해당 레포 전체 이름
          example: kyu9/My-Library
        repoUrl:
          type: string
          description: 해당 레포 url
          example: https://github.com/kyu9/My-Library
        repoDescription:
          type: string
          description: 해당 레포 설명
          example: 레포에 적어둔 설명
        repoCreated:
          type: string
          format: date-time
          description: 해당 레포 생성일
          example: 2021-11-19T00:00:00.000Z
        repoUpdated:
          type: string
          format: date-time
          description: 해당 레포 수정일
          example: 2021-11-19T00:00:00.000Z

    PostTranRequestDto:
      type: object
      properties:
        amount:
          type: integer
          nullable: false
          description: "usage amount"
          example: 2800
        userId:
          type: string
          description: "user id"
          example: "kdshim"
        registeredAt:
          type: string
          description: "transaction registered yyyyMMdd HH24:mm:si"
        registeredAtYyyymmdd:
          type: string
          description: "transaction registered yyyyMMdd"
        title:
          type: string
          description: "main purpose for the transaction"
        content:
          type: string
          description: "additional memo for the transaction"
        tagId:
          type: integer
          nullable: false
          description: "tag of the transaction"
        moneyType:
          type: string
          nullable: false
          enum:
            - FREE
            - MINE

    PostTransResponseDto:
      type: object
      properties:
        id:
          type: string
          description: "unique transaction id"

    StringDto:
      type: object
      properties:
          plainString:
            type: string
            description: 문자열
            example: 문자열

    ErrorResponseDto:
      type: object
      properties:
        code:
          type: string
        message:
          type: string