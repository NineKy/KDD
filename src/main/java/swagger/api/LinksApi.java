/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package swagger.api;

import swagger.model.ErrorResponseDto;
import swagger.model.MyLinkDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "links", description = "the links API")
public interface LinksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /links : 저장된 모든 링크 가져오기
     * 모든 링크 리스트로 가져오기
     *
     * @return 성공 (status code 200)
     *         or 실패 (status code 400)
     */
    @Operation(
        operationId = "linksGet",
        summary = "저장된 모든 링크 가져오기",
        tags = { "Links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "성공", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  MyLinkDto.class))),
            @ApiResponse(responseCode = "400", description = "실패", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponseDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/links",
        produces = { "application/json" }
    )
    default ResponseEntity<MyLinkDto> _linksGet(
        
    ) {
        return linksGet();
    }

    // Override this method
    default  ResponseEntity<MyLinkDto> linksGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Java Stream API는 왜 for-loop보다 느릴까?\", \"category\" : \"JAVA\", \"url\" : \"https://jypthemiracle.medium.com/java-stream-api는-왜-for-loop보다-느릴까-50dec4b9974b\", \"desc\" : \"실제 예시를 통한 비교 해둔 글\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
