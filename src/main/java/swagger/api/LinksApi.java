/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package swagger.api;

import swagger.model.ErrorResponseDto;
import java.util.List;
import swagger.model.PostLinkDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "links", description = "the links API")
public interface LinksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /links : 저장된 모든 링크 가져오기
     * 모든 링크 리스트로 가져오기
     *
     * @return SUCCESS (status code 200)
     *         or FAIL (status code 400)
     */
    @ApiOperation(value = "저장된 모든 링크 가져오기", nickname = "linksGet", notes = "모든 링크 리스트로 가져오기", response = PostLinkDto.class, tags={ "Links", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS", response = PostLinkDto.class),
        @ApiResponse(code = 400, message = "FAIL", response = ErrorResponseDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/links",
        produces = { "application/json" }
    )
    default ResponseEntity<PostLinkDto> _linksGet() {
        return linksGet();
    }

    // Override this method
    default  ResponseEntity<PostLinkDto> linksGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Java Stream API는 왜 for-loop보다 느릴까?\", \"category\" : \"JAVA\", \"url\" : \"https://jypthemiracle.medium.com/java-stream-api는-왜-for-loop보다-느릴까-50dec4b9974b\", \"desc\" : \"실제 예시를 통한 비교 해둔 글\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /links : 리스트로 링크를 저장
     * 리스트로 링크를 저장
     *
     * @param postLinkDto  (optional)
     * @return SUCCESS (status code 200)
     *         or FAIL (status code 400)
     */
    @ApiOperation(value = "리스트로 링크를 저장", nickname = "linksPost", notes = "리스트로 링크를 저장", tags={ "Links", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS"),
        @ApiResponse(code = 400, message = "FAIL", response = ErrorResponseDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/links",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _linksPost(@ApiParam(value = "") @Valid @RequestBody(required = false) List<PostLinkDto> postLinkDto) {
        return linksPost(postLinkDto);
    }

    // Override this method
    default  ResponseEntity<Void> linksPost(List<PostLinkDto> postLinkDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
