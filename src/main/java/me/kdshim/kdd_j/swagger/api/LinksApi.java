/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package me.kdshim.kdd_j.swagger.api;

import me.kdshim.kdd_j.swagger.model.ErrorResponseDto;
import me.kdshim.kdd_j.swagger.model.GetLinkDto;
import me.kdshim.kdd_j.swagger.model.PostLinkDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "links", description = "the links API")
public interface LinksApi {

    @ApiOperation(value = "저장된 모든 링크 가져오기", nickname = "getAllLinks", notes = "모든 링크 리스트로 가져오기", response = GetLinkDto.class, responseContainer = "List", tags={ "링크", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS", response = GetLinkDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "FAIL", response = ErrorResponseDto.class) })
    @RequestMapping(value = "/links",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<GetLinkDto>> getAllLinks();


    @ApiOperation(value = "단일 리스트 저장", nickname = "saveSingleLink", notes = "단일 리스트 저장", response = GetLinkDto.class, tags={ "링크", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS", response = GetLinkDto.class),
        @ApiResponse(code = 400, message = "FAIL", response = ErrorResponseDto.class) })
    @RequestMapping(value = "/links",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<GetLinkDto> saveSingleLink(@ApiParam(value = "" ) @Valid @RequestBody PostLinkDto body);

}

